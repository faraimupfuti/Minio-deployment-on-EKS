AWSTemplateFormatVersion: '2010-09-09'
Description: 'Deploy MinIO Object Storage on Amazon EKS with supporting infrastructure'

Parameters:
  ClusterName:
    Type: String
    Default: minio-eks-cluster
    Description: Name of the EKS cluster
  
  NodeGroupName:
    Type: String
    Default: minio-node-group
    Description: Name of the EKS node group
  
  NodeInstanceType:
    Type: String
    Default: m5.large
    Description: EC2 instance type for worker nodes
  
  MinNodeSize:
    Type: Number
    Default: 2
    MinValue: 1
    MaxValue: 10
    Description: Minimum number of worker nodes
  
  MaxNodeSize:
    Type: Number
    Default: 5
    MinValue: 1
    MaxValue: 20
    Description: Maximum number of worker nodes
  
  DesiredNodeSize:
    Type: Number
    Default: 3
    MinValue: 1
    MaxValue: 10
    Description: Desired number of worker nodes
  
  MinIONamespace:
    Type: String
    Default: minio
    Description: Kubernetes namespace for MinIO
  
  MinIOAccessKey:
    Type: String
    Default: minioadmin
    Description: MinIO access key
    NoEcho: false
  
  MinIOSecretKey:
    Type: String
    Default: minioadmin123
    Description: MinIO secret key
    NoEcho: true
    MinLength: 8

Resources:
  # VPC Configuration
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-vpc'
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: shared

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-public-subnet-1'
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: '1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-public-subnet-2'
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: '1'

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-private-subnet-1'
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: owned
        - Key: kubernetes.io/role/internal-elb
          Value: '1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-private-subnet-2'
        - Key: kubernetes.io/cluster/!Ref ClusterName
          Value: owned
        - Key: kubernetes.io/role/internal-elb
          Value: '1'

  # NAT Gateways
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-nat-eip-1'

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-nat-eip-2'

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-nat-1'

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-nat-2'

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-public-rt'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-private-rt-1'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-private-rt-2'

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  # EKS Cluster Service Role
  EKSClusterServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-cluster-role'

  # EKS Cluster Security Group
  EKSClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 10.0.0.0/16
          Description: HTTPS access from VPC
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-cluster-sg'

  # EKS Cluster
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      Version: '1.29'
      RoleArn: !GetAtt EKSClusterServiceRole.Arn
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref EKSClusterSecurityGroup
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
        EndpointConfigPrivate: false
        EndpointConfigPublic: true
        PublicAccessCidrs:
          - 0.0.0.0/0
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
            - Type: authenticator
            - Type: controllerManager
            - Type: scheduler
      Tags:
        - Key: Name
          Value: !Ref ClusterName

  # Node Group Service Role
  NodeGroupServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEBSCSIDriverPolicy
      Tags:
        - Key: Name
          Value: !Sub '${ClusterName}-nodegroup-role'

  # EKS Node Group
  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn: EKSCluster
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: !Ref NodeGroupName
      NodeRole: !GetAtt NodeGroupServiceRole.Arn
      Subnets:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      InstanceTypes:
        - !Ref NodeInstanceType
      DiskSize: 50
      AmiType: AL2_x86_64
      CapacityType: ON_DEMAND
      ScalingConfig:
        MinSize: !Ref MinNodeSize
        MaxSize: !Ref MaxNodeSize
        DesiredSize: !Ref DesiredNodeSize
      UpdateConfig:
        MaxUnavailable: 1
      RemoteAccess:
        SourceSecurityGroups:
          - !Ref EKSClusterSecurityGroup
      Tags:
        Name: !Sub '${ClusterName}-nodegroup'

  # EBS CSI Driver Addon
  EBSCSIDriverAddon:
    Type: AWS::EKS::Addon
    DependsOn: EKSNodeGroup
    Properties:
      ClusterName: !Ref ClusterName
      AddonName: aws-ebs-csi-driver
      AddonVersion: v1.27.0-eksbuild.1
      ResolveConflicts: OVERWRITE
      ServiceAccountRoleArn: !GetAtt EBSCSIDriverRole.Arn

  # EBS CSI Driver Role
  EBSCSIDriverRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Federated: !Sub 'arn:aws:iam::${AWS::AccountId}:oidc-provider/${EKSCluster.OpenIdConnectIssuerUrl}'
            Action: sts:AssumeRoleWithWebIdentity
            Condition:
              StringEquals:
                !Sub '${EKSCluster.OpenIdConnectIssuerUrl}:sub': 'system:serviceaccount:kube-system:ebs-csi-controller-sa'
                !Sub '${EKSCluster.OpenIdConnectIssuerUrl}:aud': 'sts.amazonaws.com'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy

  # Storage Class for MinIO
  MinIOStorageClass:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: EBSCSIDriverAddon
    Properties:
      ServiceToken: !GetAtt KubernetesResourceFunction.Arn
      ClusterName: !Ref ClusterName
      ResourceType: StorageClass
      Manifest: |
        apiVersion: storage.k8s.io/v1
        kind: StorageClass
        metadata:
          name: minio-storage
        provisioner: ebs.csi.aws.com
        parameters:
          type: gp3
          fsType: ext4
        allowVolumeExpansion: true
        volumeBindingMode: WaitForFirstConsumer

  # MinIO Namespace
  MinIONamespaceResource:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: MinIOStorageClass
    Properties:
      ServiceToken: !GetAtt KubernetesResourceFunction.Arn
      ClusterName: !Ref ClusterName
      ResourceType: Namespace
      Manifest: !Sub |
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${MinIONamespace}

  # MinIO Secret
  MinIOSecret:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: MinIONamespaceResource
    Properties:
      ServiceToken: !GetAtt KubernetesResourceFunction.Arn
      ClusterName: !Ref ClusterName
      ResourceType: Secret
      Manifest: !Sub |
        apiVersion: v1
        kind: Secret
        metadata:
          name: minio-secret
          namespace: ${MinIONamespace}
        type: Opaque
        data:
          accesskey: ${MinIOAccessKey}
          secretkey: ${MinIOSecretKey}

  # MinIO Deployment
  MinIODeployment:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: MinIOSecret
    Properties:
      ServiceToken: !GetAtt KubernetesResourceFunction.Arn
      ClusterName: !Ref ClusterName
      ResourceType: Deployment
      Manifest: !Sub |
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: minio
          namespace: ${MinIONamespace}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: minio
          template:
            metadata:
              labels:
                app: minio
            spec:
              containers:
              - name: minio
                image: minio/minio:latest
                args:
                - server
                - /data
                - --console-address
                - ":9001"
                env:
                - name: MINIO_ACCESS_KEY
                  valueFrom:
                    secretKeyRef:
                      name: minio-secret
                      key: accesskey
                - name: MINIO_SECRET_KEY
                  valueFrom:
                    secretKeyRef:
                      name: minio-secret
                      key: secretkey
                ports:
                - containerPort: 9000
                  name: minio-api
                - containerPort: 9001
                  name: minio-console
                volumeMounts:
                - name: data
                  mountPath: /data
                livenessProbe:
                  httpGet:
                    path: /minio/health/live
                    port: 9000
                  initialDelaySeconds: 120
                  periodSeconds: 20
                readinessProbe:
                  httpGet:
                    path: /minio/health/ready
                    port: 9000
                  initialDelaySeconds: 120
                  periodSeconds: 20
                resources:
                  requests:
                    memory: "512Mi"
                    cpu: "250m"
                  limits:
                    memory: "1Gi"
                    cpu: "500m"
              volumes:
              - name: data
                persistentVolumeClaim:
                  claimName: minio-pvc

  # MinIO PVC
  MinIOPVC:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: MinIONamespaceResource
    Properties:
      ServiceToken: !GetAtt KubernetesResourceFunction.Arn
      ClusterName: !Ref ClusterName
      ResourceType: PersistentVolumeClaim
      Manifest: !Sub |
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: minio-pvc
          namespace: ${MinIONamespace}
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: minio-storage
          resources:
            requests:
              storage: 20Gi

  # MinIO Service
  MinIOService:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: MinIODeployment
    Properties:
      ServiceToken: !GetAtt KubernetesResourceFunction.Arn
      ClusterName: !Ref ClusterName
      ResourceType: Service
      Manifest: !Sub |
        apiVersion: v1
        kind: Service
        metadata:
          name: minio-service
          namespace: ${MinIONamespace}
        spec:
          type: LoadBalancer
          ports:
          - port: 9000
            targetPort: 9000
            name: minio-api
          - port: 9001
            targetPort: 9001
            name: minio-console
          selector:
            app: minio

  # Lambda execution role for Kubernetes resources
  KubernetesResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: EKSAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                Resource: !GetAtt EKSCluster.Arn
              - Effect: Allow
                Action:
                  - sts:AssumeRole
                Resource: '*'

  # Lambda function for Kubernetes resource management
  KubernetesResourceFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ClusterName}-k8s-resource-handler'
      Runtime: python3.9
      Handler: index.handler
      Role: !GetAtt KubernetesResourceRole.Arn
      Timeout: 300
      Code:
        ZipFile: |
          import json
          import boto3
          import base64
          import yaml
          import subprocess
          import os
          
          def handler(event, context):
              try:
                  request_type = event['RequestType']
                  properties = event['ResourceProperties']
                  cluster_name = properties['ClusterName']
                  manifest = properties['Manifest']
                  
                  # Configure kubectl
                  eks_client = boto3.client('eks')
                  cluster_info = eks_client.describe_cluster(name=cluster_name)
                  
                  # Write kubeconfig
                  kubeconfig = {
                      'apiVersion': 'v1',
                      'clusters': [{
                          'cluster': {
                              'certificate-authority-data': cluster_info['cluster']['certificateAuthority']['data'],
                              'server': cluster_info['cluster']['endpoint']
                          },
                          'name': cluster_name
                      }],
                      'contexts': [{
                          'context': {
                              'cluster': cluster_name,
                              'user': cluster_name
                          },
                          'name': cluster_name
                      }],
                      'current-context': cluster_name,
                      'kind': 'Config',
                      'users': [{
                          'name': cluster_name,
                          'user': {
                              'exec': {
                                  'apiVersion': 'client.authentication.k8s.io/v1beta1',
                                  'command': 'aws',
                                  'args': ['eks', 'get-token', '--cluster-name', cluster_name]
                              }
                          }
                      }]
                  }
                  
                  with open('/tmp/kubeconfig', 'w') as f:
                      yaml.dump(kubeconfig, f)
                  
                  os.environ['KUBECONFIG'] = '/tmp/kubeconfig'
                  
                  # Write manifest to file
                  with open('/tmp/manifest.yaml', 'w') as f:
                      f.write(manifest)
                  
                  if request_type in ['Create', 'Update']:
                      result = subprocess.run(['kubectl', 'apply', '-f', '/tmp/manifest.yaml'], 
                                            capture_output=True, text=True)
                  elif request_type == 'Delete':
                      result = subprocess.run(['kubectl', 'delete', '-f', '/tmp/manifest.yaml', '--ignore-not-found=true'], 
                                            capture_output=True, text=True)
                  
                  if result.returncode != 0:
                      print(f"kubectl error: {result.stderr}")
                      # Don't fail for delete operations
                      if request_type != 'Delete':
                          raise Exception(result.stderr)
                  
                  return {
                      'PhysicalResourceId': f"{cluster_name}-{properties.get('ResourceType', 'resource')}",
                      'Data': {}
                  }
              except Exception as e:
                  print(f"Error: {str(e)}")
                  return {
                      'PhysicalResourceId': 'error',
                      'Data': {'Error': str(e)}
                  }

Outputs:
  ClusterName:
    Description: Name of the EKS cluster
    Value: !Ref EKSCluster
    Export:
      Name: !Sub '${AWS::StackName}-ClusterName'

  ClusterEndpoint:
    Description: EKS cluster endpoint
    Value: !GetAtt EKSCluster.Endpoint
    Export:
      Name: !Sub '${AWS::StackName}-ClusterEndpoint'

  ClusterArn:
    Description: EKS cluster ARN
    Value: !GetAtt EKSCluster.Arn
    Export:
      Name: !Sub '${AWS::StackName}-ClusterArn'

  NodeGroupArn:
    Description: EKS node group ARN
    Value: !GetAtt EKSNodeGroup.Arn
    Export:
      Name: !Sub '${AWS::StackName}-NodeGroupArn'

  VPCId:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub '${AWS::StackName}-VPC'

  MinIONamespace:
    Description: MinIO Kubernetes namespace
    Value: !Ref MinIONamespace
    Export:
      Name: !Sub '${AWS::StackName}-MinIONamespace'

  MinIOAccessInstructions:
    Description: Instructions for accessing MinIO
    Value: !Sub |
      1. Configure kubectl: aws eks update-kubeconfig --region ${AWS::Region} --name ${ClusterName}
      2. Get LoadBalancer endpoint: kubectl get service minio-service -n ${MinIONamespace}
      3. Access MinIO Console at: http://<EXTERNAL-IP>:9001
      4. Access MinIO API at: http://<EXTERNAL-IP>:9000
      5. Use credentials - Access Key: ${MinIOAccessKey}, Secret Key: ${MinIOSecretKey}
